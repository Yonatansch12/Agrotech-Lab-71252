#include <Wire.h>
#include <U8g2lib.h>

// Define pins for HC-SR04
const int trigPin = 3; // D3 on Arduino Nano
const int echoPin = 4; // D4 on Arduino Nano

// Variables to store the duration and distance
long duration;
float distance;
float initialDistance; // Initial distance in cm

// Variables to store the seed count
int seedCount = 0;

// Variable to store the last time the LED was toggled
unsigned long LED_previousMillis = 0;
unsigned long sensor_previousMillis = 0;

// Interval for the action (2 seconds = 2000 milliseconds)
const long LED_interval = 2000;

const long sensor_interval = 10;

// Initialize the OLED display
U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0, /* reset=*/U8X8_PIN_NONE);

void setup() {
  Serial.begin(9600);
  Wire.begin(); // Initialize I2C

  // Initialize the OLED display
  u8g2.begin();

  // Set the trigPin as an OUTPUT and the echoPin as an INPUT
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Measure the initial distance
  initialDistance = measureDistance();
  Serial.print("Initial Distance: ");
  Serial.print(initialDistance);
  Serial.println(" cm");
}

float measureDistance() {
  // Clear the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Set the trigPin HIGH for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echoPin and calculate the duration
  duration = pulseIn(echoPin, HIGH);

  // Check if duration is valid
  if (duration == 0) {
    Serial.println("No echo received");
    return -1; // Indicate an invalid distance
  } else {
    // Calculate the distance in cm
    float measuredDistance = duration * 0.034;
    return measuredDistance;
  }
}

void loop() {

  unsigned long currentMillis = millis();

  // Check if the interval has passed
  if (currentMillis - sensor_previousMillis >= sensor_interval) {
    // Save the last time the LED was toggled
    sensor_previousMillis = currentMillis;

      // Measure the current distance
    distance = measureDistance();
  
    // Check if the distance measurement is valid
    if (distance != -1) {
      // Print the distance to the Serial Monitor
      Serial.print("Distance: ");
      Serial.println(distance*1000);
//      Serial.println(" cm");
  
      // Check if the distance has changed from the initial distance by more than 0.4 cm
      if (abs(distance - initialDistance) > 1) {
        seedCount++;
        initialDistance = distance; // Update the initial distance to the current distance
      }
     }
  }



  // Check if the interval has passed for OLED
  if (currentMillis - LED_previousMillis >= LED_interval) {
    // Save the last time the LED was toggled
    LED_previousMillis = currentMillis;

      // Display the results on the OLED
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB08_tr);
  
      if (distance != -1) {
        char distanceStr[20];
        sprintf(distanceStr, "Distance: %.1f cm", distance);
        u8g2.drawStr(0, 20, distanceStr);
      } else {
        u8g2.drawStr(0, 20, "No echo received");
      }
  
      // Display the seed count
      char seedStr[20];
      sprintf(seedStr, "Seeds: %d", seedCount);
      u8g2.drawStr(0, 40, seedStr);
  
    } while (u8g2.nextPage());


  }
 
//  delay(5); // Adjust the delay for stable readings and display updates
}
